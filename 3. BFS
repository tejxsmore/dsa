C++

class Solution{
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
          vector<int> bfs;
          int vis[V] = {0};
          queue<int> q;

          q.push(0);
          vis[0] = 1;

          while(!q.empty()){
              int node = q.front();
              q.pop();
              bfs.push_back(node);

              for(auto it : adj[node]){
                  if(!vis[it]){
                      vis[it] = 1;
                      q.push(it);
                  }
              }
          }

          return bfs;
    }
};

JAVA -

class Solution {
    
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        
        boolean vis[] = new boolean[V];
        vis[0] = true;
        
        while(!q.isEmpty()){
            int node = q.poll();
            list.add(node);
            
            for(Integer it : adj.get(node)){
                if(vis[it] == false){
                    vis[it] = true;
                    q.offer(it);
                }
            }
        }
        
        return list;
    }
}
