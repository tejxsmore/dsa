// BREADTH FIRST SEARCH

C++

class Solution{
    private:
    bool detectCycle(int src, int vis[], vector<int> adj[]){
        vis[src] = 1;
        queue<pair<int, int>> q;
        q.push({src, -1});
        
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto adjNode : adj[node]){
                if(!vis[adjNode]){
                    vis[adjNode] = 1;
                    q.push({adjNode, node});
                }else if(adjNode != parent){
                    return true;
                }
            }
        }
        return false;
    }
  public:
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V] = {0};
        for(int i = 0; i<V; i++){
            if(!vis[i]){
                if(detectCycle(i, vis, adj) == true){
                    return true;
                }
            }
        }
        return false;
    }
};

// DEPTH FIRST SEARCH
class Solution{
    private:
    bool detect(int src,int parent, int vis[], vector<int> adj[]){
        vis[src] = 1;
        
        for(auto it : adj[src]){
            if(!vis[it]){
                if(detect(it, src, vis, adj) == true) return true;
            }else if(it != parent){
                return true;
            }
        }
        return false;
    }
  public:
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V] = {0};
        
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                if(detect(i,-1, vis, adj) == true) return true;
            }
        }
        return false;
    }
};

JAVA

class Pair{
    int first;
    int second;
    
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[] = new boolean[V];
        for(int i = 0; i<V; i++) vis[i] = false;
        
        for(int i = 0; i<V; i++){
            if(vis[i] == false){
                if(detectCycle(i, V, vis, adj)) return true;
            }
        }
        
        return false;
    }
    
    public boolean detectCycle(int src, int V, boolean vis[], ArrayList<ArrayList<Integer>> adj){
        vis[src] = true;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(src, -1));
        
        while(!q.isEmpty()){
            int node = q.peek().first;
            int parent = q.peek().second;
            q.poll();
            
            for(int it : adj.get(node)){
                if(vis[it] == false){
                    vis[it] = true;
                    q.offer(new Pair(it, node));
                }else if(it != parent) return true;
            }
        }
        return false;
    }
}
